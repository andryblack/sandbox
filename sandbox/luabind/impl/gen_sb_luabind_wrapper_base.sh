#!/bin/sh

GUARD="SB_LUABIND_WRAPPER_BASE_H_INCLUDED"
MAXARGS=8

echo "#ifndef $GUARD" 
echo "#define $GUARD" 
echo
echo "/**"
echo "	generated by $0 at $(date)"
echo "*/"
echo "#include \"../sb_luabind_stack.h\""
echo "namespace Sandbox {"
echo "	namespace luabind { namespace impl {"
# object wrapper
echo "		class wrapper_base : public LuaReference {"
echo "		public:"
echo "			virtual ~wrapper_base() {}"
echo "		protected:"
for (( args=0; args<=$MAXARGS; args++ ))
do
	echo "			// implementation for $args args"
	tmpl_args=""
	func_args=""
	ffunc_args=""
	call_args=""

	for (( i=1; i<=$args; i++ ))
	do
		if [ "$func_args""x" != "x" ]; then
			func_args="$func_args,\n						"
			ffunc_args="$ffunc_args,\n 						"
			call_args="$call_args\n				"
			tmpl_args="$tmpl_args,\n				"
		fi
		tmpl_args="$tmpl_args""typename A$i"
		func_args="$func_args""typename sb::type_traits<A$i>::parameter_type a$i"
		ffunc_args="$ffunc_args""A$i a$i"
		call_args="$call_args""stack<A$i>::push(L,a$i);"
	done
	
	if [ "$args" == "0" ]; then
		echo "			// void method void"
		echo "			void call(const char* name){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				lua_call_method(L,0,0,name);"
		echo "			}"

		echo "			// void method void"
		echo "			void call_self(const char* name){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				GetObject(L);"
		echo "				lua_call_method(L,1,0,name);"
		echo "			}"


		echo "			// res method void"
		echo "			template<class R>"
		echo "			R call(const char* name){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				lua_call_method(L,0,1,name);"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"

		echo "			// res method void"
		echo "			template<class R>"
		echo "			R call_self(const char* name){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				GetObject(L);"
		echo "				lua_call_method(L,1,1,name);"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"

	else
		echo "			// void method void"
		echo "			template<$tmpl_args>"
		echo "			void call(const char* name,$ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				$call_args";
		echo "				lua_call_method(L,$args,0,name);"
		echo "			}"

		echo "			// void method void"
		echo "			template<$tmpl_args>"
		echo "			void call_self(const char* name,$ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				GetObject(L);"
		echo "				$call_args";
		echo "				lua_call_method(L,1+$args,0,name);"
		echo "			}"

		echo "			// res method void"
		echo "			template<class R,$tmpl_args>"
		echo "			R call(const char* name,$ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				$call_args";
		echo "				lua_call_method(L,$args,1,name);"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"

		echo "			// res method void"
		echo "			template<class R,$tmpl_args>"
		echo "			R call_self(const char* name,$ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				lua_getfield(L,-1,name);"
		echo "				lua_remove(L,-2);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				GetObject(L);"
		echo "				$call_args";
		echo "				lua_call_method(L,1+$args,1,name);"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"

	fi
	
	
done
echo "		};"


echo "		class function_wrapper_base : public LuaReference {"
echo "		public:"
echo "			virtual ~function_wrapper_base() {}"
echo "		protected:"
for (( args=0; args<=$MAXARGS; args++ ))
do
	echo "			// implementation for $args args"
	tmpl_args=""
	func_args=""
	ffunc_args=""
	call_args=""

	for (( i=1; i<=$args; i++ ))
	do
		if [ "$func_args""x" != "x" ]; then
			func_args="$func_args,\n						"
			ffunc_args="$ffunc_args,\n 						"
			call_args="$call_args\n				"
			tmpl_args="$tmpl_args,\n				"
		fi
		tmpl_args="$tmpl_args""typename A$i"
		func_args="$func_args""typename sb::type_traits<A$i>::parameter_type a$i"
		ffunc_args="$ffunc_args""A$i a$i"
		call_args="$call_args""stack<A$i>::push(L,a$i);"
	done
	
	if [ "$args" == "0" ]; then
		
		echo "			// void method void"
		echo "			void call(){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				lua_call_method(L,0,0,\"function\");"
		echo "			}"

		echo "			// res method void"
		echo "			template<class R>"
		echo "			R call(){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				lua_call_method(L,0,1,\"function\");"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"
	else

		echo "			// void method void"
		echo "			template<$tmpl_args>"
		echo "			void call($ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return;"
		echo "				}"
		echo "				$call_args";
		echo "				lua_call_method(L,$args,0,\"function\");"
		echo "			}"

		echo "			// res method void"
		echo "			template<class R,$tmpl_args>"
		echo "			R call($ffunc_args){"
		echo "				lua_State* L = GetVM();"
		echo "				LUA_CHECK_STACK(0)"
		echo "				GetObject(L);"
		echo "				if (!lua_isfunction(L,-1)) {"
		echo "					sb_assert(false);"
		echo "					return R();"
		echo "				}"
		echo "				$call_args";
		echo "				lua_call_method(L,$args,1,\"function\");"
		echo "				R res = stack<R>::get(L,-1);"
		echo "				lua_pop(L,1);"
		echo "				return res;"
		echo "			}"
	fi
	
	
done
echo "		};"

echo "	} }"
echo "}"
echo "#endif /*$GUARD*/" 